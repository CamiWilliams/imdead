{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _emitter = require('./emitter');\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nvar _Variant = require('./Variant');\n\nvar _Variant2 = _interopRequireDefault(_Variant);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar CoreExperiment = function (_Component) {\n  _inherits(CoreExperiment, _Component);\n\n  function CoreExperiment(props) {\n    _classCallCheck(this, CoreExperiment);\n\n    var _this = _possibleConstructorReturn(this, (CoreExperiment.__proto__ || Object.getPrototypeOf(CoreExperiment)).call(this));\n\n    _this.win = function () {\n      _emitter2.default.emitWin(_this.props.name);\n    };\n\n    _this.state = {};\n    _this.displayName = \"Pushtell.CoreExperiment\";\n    var children = {};\n\n    _react2.default.Children.forEach(props.children, function (element) {\n      if (!_react2.default.isValidElement(element) || element.type.displayName !== \"Pushtell.Variant\") {\n        var error = new Error(\"Pushtell Experiment children must be Pushtell Variant components.\");\n        error.type = \"PUSHTELL_INVALID_CHILD\";\n        throw error;\n      }\n\n      children[element.props.name] = element;\n\n      _emitter2.default.addExperimentVariant(props.name, element.props.name);\n    });\n\n    _emitter2.default.emit(\"variants-loaded\", props.name);\n\n    _this.state.variants = children;\n    return _this;\n  }\n\n  _createClass(CoreExperiment, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.value !== this.props.value || nextProps.children !== this.props.children) {\n        var value = typeof nextProps.value === \"function\" ? nextProps.value() : nextProps.value;\n        var children = {};\n\n        _react2.default.Children.forEach(nextProps.children, function (element) {\n          children[element.props.name] = element;\n        });\n\n        this.setState({\n          value: value,\n          variants: children\n        });\n      }\n    }\n  }, {\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var value = typeof this.props.value === \"function\" ? this.props.value() : this.props.value;\n\n      if (!this.state.variants[value]) {\n        if (\"production\" !== process.env.NODE_ENV) {\n          (0, _warning2.default)(true, 'Experiment “' + this.props.name + '” does not contain variant “' + value + '”');\n        }\n      }\n\n      _emitter2.default._incrementActiveExperiments(this.props.name);\n\n      _emitter2.default.setActiveVariant(this.props.name, value);\n\n      _emitter2.default._emitPlay(this.props.name, value);\n\n      this.setState({\n        value: value\n      });\n      this.valueSubscription = _emitter2.default.addActiveVariantListener(this.props.name, function (experimentName, variantName) {\n        _this2.setState({\n          value: variantName\n        });\n      });\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      _emitter2.default._decrementActiveExperiments(this.props.name);\n\n      this.valueSubscription.remove();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return this.state.variants[this.state.value] || null;\n    }\n  }]);\n\n  return CoreExperiment;\n}(_react.Component);\n\nCoreExperiment.propTypes = {\n  name: _propTypes2.default.string.isRequired,\n  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired\n};\nexports.default = CoreExperiment;\n;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _fbemitter = require('fbemitter');\n\nvar values = {};\nvar experiments = {};\nvar experimentWeights = {};\nvar activeExperiments = {};\nvar experimentsWithDefinedVariants = {};\nvar playedExperiments = {};\nvar emitter = new _fbemitter.EventEmitter();\n\nvar PushtellEventEmitter = function PushtellEventEmitter() {};\n\nPushtellEventEmitter.prototype.emitWin = function (experimentName) {\n  if (typeof experimentName !== 'string') {\n    throw new Error(\"Required argument 'experimentName' should have type 'string'\");\n  }\n\n  emitter.emit(\"win\", experimentName, values[experimentName]);\n};\n\nPushtellEventEmitter.prototype._emitPlay = function (experimentName, variantName) {\n  if (typeof experimentName !== 'string') {\n    throw new Error(\"Required argument 'experimentName' should have type 'string'\");\n  }\n\n  if (typeof variantName !== 'string') {\n    throw new Error(\"Required argument 'variantName' should have type 'string'\");\n  }\n\n  if (!playedExperiments[experimentName]) {\n    emitter.emit('play', experimentName, variantName);\n    playedExperiments[experimentName] = true;\n  }\n};\n\nPushtellEventEmitter.prototype._resetPlayedExperiments = function () {\n  values = {};\n  playedExperiments = {};\n};\n\nPushtellEventEmitter.prototype._reset = function () {\n  values = {};\n  experiments = {};\n  experimentWeights = {};\n  activeExperiments = {};\n  experimentsWithDefinedVariants = {};\n  playedExperiments = {};\n};\n\nPushtellEventEmitter.prototype.rewind = function () {\n  this._reset();\n\n  emitter.removeAllListeners();\n};\n\nPushtellEventEmitter.prototype._incrementActiveExperiments = function (experimentName) {\n  activeExperiments[experimentName] = activeExperiments[experimentName] || 0;\n  activeExperiments[experimentName] += 1;\n  emitter.emit(\"active\", experimentName);\n};\n\nPushtellEventEmitter.prototype._decrementActiveExperiments = function (experimentName) {\n  activeExperiments[experimentName] -= 1;\n  emitter.emit(\"inactive\", experimentName);\n};\n\nPushtellEventEmitter.prototype.addActiveVariantListener = function (experimentName, callback) {\n  if (typeof experimentName === \"function\") {\n    callback = experimentName;\n    return emitter.addListener(\"active-variant\", function (_experimentName, variantName, passthrough) {\n      callback(_experimentName, variantName, passthrough);\n    });\n  }\n\n  return emitter.addListener(\"active-variant\", function (_experimentName, variantName, passthrough) {\n    if (_experimentName === experimentName) {\n      callback(_experimentName, variantName, passthrough);\n    }\n  });\n};\n\nPushtellEventEmitter.prototype.emit = function () {\n  return emitter.emit.apply(emitter, arguments);\n};\n\nPushtellEventEmitter.prototype.addListener = function (eventName, callback) {\n  return emitter.addListener(eventName, callback);\n};\n\nPushtellEventEmitter.prototype.once = function (eventName, callback) {\n  return emitter.once(eventName, callback);\n};\n\nPushtellEventEmitter.prototype.addPlayListener = function (experimentName, callback) {\n  if (typeof experimentName === \"function\") {\n    callback = experimentName;\n    return emitter.addListener('play', function (_experimentName, variantName) {\n      callback(_experimentName, variantName);\n    });\n  }\n\n  return emitter.addListener('play', function (_experimentName, variantName) {\n    if (_experimentName === experimentName) {\n      callback(_experimentName, variantName);\n    }\n  });\n};\n\nPushtellEventEmitter.prototype.addWinListener = function (experimentName, callback) {\n  if (typeof experimentName === \"function\") {\n    callback = experimentName;\n    return emitter.addListener('win', function (_experimentName, variantName) {\n      callback(_experimentName, variantName);\n    });\n  }\n\n  return emitter.addListener('win', function (_experimentName, variantName) {\n    if (_experimentName === experimentName) {\n      callback(_experimentName, variantName);\n    }\n  });\n};\n\nPushtellEventEmitter.prototype.defineVariants = function (experimentName, variantNames, variantWeights) {\n  var variantsNamesMap = {};\n  var variantWeightsMap = {};\n  variantNames.forEach(function (variantName) {\n    variantsNamesMap[variantName] = true;\n  });\n\n  if (Array.isArray(variantWeights)) {\n    if (variantNames.length !== variantWeights.length) {\n      throw new Error(\"Required argument 'variantNames' should have the same number of elements as optional argument 'variantWeights'\");\n    }\n\n    variantNames.forEach(function (variantName, index) {\n      if (typeof variantWeights[index] !== 'number') {\n        throw new Error(\"Optional argument 'variantWeights' should be an array of numbers.\");\n      }\n\n      variantWeightsMap[variantName] = variantWeights[index];\n    });\n  } else {\n    variantNames.forEach(function (variantName, index) {\n      variantWeightsMap[variantName] = 1;\n    });\n  }\n\n  experimentWeights[experimentName] = variantWeightsMap;\n  experiments[experimentName] = variantsNamesMap;\n  experimentsWithDefinedVariants[experimentName] = true;\n};\n\nPushtellEventEmitter.prototype.getSortedVariants = function (experimentName) {\n  var variantNames = Object.keys(experiments[experimentName]);\n  variantNames.sort();\n  return variantNames;\n};\n\nPushtellEventEmitter.prototype.getSortedVariantWeights = function (experimentName) {\n  return this.getSortedVariants(experimentName).map(function (variantName) {\n    return experimentWeights[experimentName][variantName];\n  });\n};\n\nPushtellEventEmitter.prototype.getActiveExperiments = function () {\n  var response = {};\n  Object.keys(activeExperiments).forEach(function (experimentName) {\n    if (activeExperiments[experimentName] === 0) {\n      return;\n    }\n\n    response[experimentName] = {};\n    Object.keys(experiments[experimentName]).forEach(function (variantName) {\n      response[experimentName][variantName] = values[experimentName] === variantName;\n    });\n  });\n  return response;\n};\n\nPushtellEventEmitter.prototype.getActiveVariant = function (experimentName) {\n  return values[experimentName];\n};\n\nPushtellEventEmitter.prototype.setActiveVariant = function (experimentName, variantName, passthrough) {\n  values[experimentName] = variantName;\n  emitter.emit(\"active-variant\", experimentName, variantName, passthrough);\n};\n\nPushtellEventEmitter.prototype.addExperimentVariant = function (experimentName, variantName) {\n  experiments[experimentName] = experiments[experimentName] || {};\n  experimentWeights[experimentName] = experimentWeights[experimentName] || {};\n\n  if (experiments[experimentName][variantName] !== true) {\n    if (experimentsWithDefinedVariants[experimentName]) {\n      var error = new Error(\"Experiment “\" + experimentName + \"” added new variants after variants were defined.\");\n      error.type = \"PUSHTELL_INVALID_VARIANT\";\n      throw error;\n    }\n\n    if (values[experimentName]) {\n      var _error = new Error(\"Experiment “\" + experimentName + \"” added new variants after a variant was selected. Declare the variant names using emitter.defineVariants(experimentName, variantNames).\");\n\n      _error.type = \"PUSHTELL_INVALID_VARIANT\";\n      throw _error;\n    }\n\n    experimentWeights[experimentName][variantName] = 1;\n  }\n\n  experiments[experimentName][variantName] = true;\n};\n\nexports.default = new PushtellEventEmitter();\n;","map":null,"metadata":{},"sourceType":"script"}